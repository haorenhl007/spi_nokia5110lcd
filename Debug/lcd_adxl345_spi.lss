
lcd_adxl345_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000584  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024a  00800060  00000584  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002220  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c01  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000021  00000000  00000000  00003665  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e8       	ldi	r30, 0x84	; 132
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 3a       	cpi	r26, 0xAA	; 170
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	93 d2       	rcall	.+1318   	; 0x570 <main>
  4a:	9a c2       	rjmp	.+1332   	; 0x580 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <en_toggle>:

}
///产生一个使能脉冲
 void en_toggle(void)
{
	En_H;     //拉高使能位
  4e:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	85 e0       	ldi	r24, 0x05	; 5
  52:	8a 95       	dec	r24
  54:	f1 f7       	brne	.-4      	; 0x52 <en_toggle+0x4>
  56:	00 00       	nop
	DelaytE;     //保持高电平一定时间
	En_L;     //拉低使能位,产生一个下降沿
  58:	a8 98       	cbi	0x15, 0	; 21
  5a:	85 e0       	ldi	r24, 0x05	; 5
  5c:	8a 95       	dec	r24
  5e:	f1 f7       	brne	.-4      	; 0x5c <en_toggle+0xe>
  60:	00 00       	nop
  62:	08 95       	ret

00000064 <wait_until_ready>:
	//LCDDDR = 0x0F;
//	DB4_PORT &= ~_BV(DB4);
//	DB5_PORT &= ~_BV(DB5);
//	DB6_PORT &= ~_BV(DB6);
//	DB7_PORT &= ~_BV(DB7);
	SET_DB_IN()
  64:	8c 98       	cbi	0x11, 4	; 17
  66:	8d 98       	cbi	0x11, 5	; 17
  68:	8e 98       	cbi	0x11, 6	; 17
  6a:	8f 98       	cbi	0x11, 7	; 17
	//命令选择
	RW_R;     //读状态
  6c:	a9 9a       	sbi	0x15, 1	; 21
	RS_ADDR;     //地址(状态)所读为状态位
  6e:	aa 98       	cbi	0x15, 2	; 21
  70:	85 e0       	ldi	r24, 0x05	; 5
  72:	8a 95       	dec	r24
  74:	f1 f7       	brne	.-4      	; 0x72 <wait_until_ready+0xe>
  76:	00 00       	nop
	//命令选择完毕
	DelaytE;
	En_H;     //触发
  78:	a8 9a       	sbi	0x15, 0	; 21
  7a:	85 e0       	ldi	r24, 0x05	; 5
  7c:	8a 95       	dec	r24
  7e:	f1 f7       	brne	.-4      	; 0x7c <wait_until_ready+0x18>
  80:	00 00       	nop
	DelaytE;     // 这是忙标志被映射到数据DB7 位
	loop_until_bit_is_clear(DB7_IN, DB7);
  82:	87 99       	sbic	0x10, 7	; 16
  84:	fe cf       	rjmp	.-4      	; 0x82 <wait_until_ready+0x1e>
	En_L;
  86:	a8 98       	cbi	0x15, 0	; 21
  88:	08 95       	ret

0000008a <set_command>:
 * 写命令
 * @param[in] Command 命令
 * @param[in] busyFlag 是否检查繁忙
 */
void set_command(uint8_t data, uint8_t busyFlag)
{
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
	uint8_t busy;
	busy = busyFlag;
	//busy=1 表示系统希望检测忙信号
	if (busy==1)
  8e:	61 30       	cpi	r22, 0x01	; 1
  90:	09 f4       	brne	.+2      	; 0x94 <set_command+0xa>
		//等待指令执行完毕
		wait_until_ready();
  92:	e8 df       	rcall	.-48     	; 0x64 <wait_until_ready>
	//完毕,可以写了
	SET_DB_OUT()
  94:	8c 9a       	sbi	0x11, 4	; 17
  96:	8d 9a       	sbi	0x11, 5	; 17
  98:	8e 9a       	sbi	0x11, 6	; 17
  9a:	8f 9a       	sbi	0x11, 7	; 17
	;
	RW_W;     //置为写状态 =写 0
  9c:	a9 98       	cbi	0x15, 1	; 21
	RS_L;     //写入的是命令字 =指令
  9e:	aa 98       	cbi	0x15, 2	; 21
	En_H;
  a0:	a8 9a       	sbi	0x15, 0	; 21
	(data&0b00010000) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第4位
  a2:	c4 ff       	sbrs	r28, 4
  a4:	02 c0       	rjmp	.+4      	; 0xaa <set_command+0x20>
  a6:	94 9a       	sbi	0x12, 4	; 18
  a8:	01 c0       	rjmp	.+2      	; 0xac <set_command+0x22>
  aa:	94 98       	cbi	0x12, 4	; 18
	(data&0b00100000) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第5位
  ac:	c5 ff       	sbrs	r28, 5
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <set_command+0x2a>
  b0:	95 9a       	sbi	0x12, 5	; 18
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <set_command+0x2c>
  b4:	95 98       	cbi	0x12, 5	; 18
	(data&0b01000000) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第6位
  b6:	c6 ff       	sbrs	r28, 6
  b8:	02 c0       	rjmp	.+4      	; 0xbe <set_command+0x34>
  ba:	96 9a       	sbi	0x12, 6	; 18
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <set_command+0x36>
  be:	96 98       	cbi	0x12, 6	; 18
	(data&0b10000000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第7位
  c0:	c7 ff       	sbrs	r28, 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <set_command+0x3e>
  c4:	97 9a       	sbi	0x12, 7	; 18
  c6:	01 c0       	rjmp	.+2      	; 0xca <set_command+0x40>
  c8:	97 98       	cbi	0x12, 7	; 18
  ca:	82 e4       	ldi	r24, 0x42	; 66
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <set_command+0x42>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <set_command+0x48>
	_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
  d2:	bd df       	rcall	.-134    	; 0x4e <en_toggle>
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
  d4:	c0 ff       	sbrs	r28, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <set_command+0x52>
  d8:	94 9a       	sbi	0x12, 4	; 18
  da:	01 c0       	rjmp	.+2      	; 0xde <set_command+0x54>
  dc:	94 98       	cbi	0x12, 4	; 18
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
  de:	c1 ff       	sbrs	r28, 1
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <set_command+0x5c>
  e2:	95 9a       	sbi	0x12, 5	; 18
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <set_command+0x5e>
  e6:	95 98       	cbi	0x12, 5	; 18
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
  e8:	c2 ff       	sbrs	r28, 2
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <set_command+0x66>
  ec:	96 9a       	sbi	0x12, 6	; 18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <set_command+0x68>
  f0:	96 98       	cbi	0x12, 6	; 18
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
  f2:	c3 ff       	sbrs	r28, 3
  f4:	02 c0       	rjmp	.+4      	; 0xfa <set_command+0x70>
  f6:	97 9a       	sbi	0x12, 7	; 18
  f8:	01 c0       	rjmp	.+2      	; 0xfc <set_command+0x72>
  fa:	97 98       	cbi	0x12, 7	; 18
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <set_command+0x74>
 102:	00 c0       	rjmp	.+0      	; 0x104 <set_command+0x7a>
	_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
}
 104:	cf 91       	pop	r28
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
	_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
 106:	a3 cf       	rjmp	.-186    	; 0x4e <en_toggle>

00000108 <init_lcd>:
 */
void init_lcd(void)
{

	//3个控制端口为输出
	CRTL_OUT()
 108:	a0 9a       	sbi	0x14, 0	; 20
 10a:	a1 9a       	sbi	0x14, 1	; 20
 10c:	a2 9a       	sbi	0x14, 2	; 20
	//4条数据总线:输出
	SET_DB_OUT()
 10e:	8c 9a       	sbi	0x11, 4	; 17
 110:	8d 9a       	sbi	0x11, 5	; 17
 112:	8e 9a       	sbi	0x11, 6	; 17
 114:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e2       	ldi	r24, 0x2F	; 47
 118:	95 e7       	ldi	r25, 0x75	; 117
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <init_lcd+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <init_lcd+0x18>
 120:	00 00       	nop
	//设置功能: [0] [0]  [1] [1]DL-8位  X X X X
	uint8_t fun_8bit_2line = 0b00110000;//低四位无关
	//设置功能: [0] [0]  [1] [0]DL-4位 [1]N-双行 [0]F-5*7字形 X X
	uint8_t fun_4bit_2line = 0b00101000;
	_delay_ms(15);     //2
	set_command(fun_8bit_2line, 0);     //3设为 8 位接口模式,busy=0 不检测忙信号
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	b1 df       	rcall	.-158    	; 0x8a <set_command>
 128:	87 e0       	ldi	r24, 0x07	; 7
 12a:	90 e2       	ldi	r25, 0x20	; 32
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <init_lcd+0x24>
 130:	00 c0       	rjmp	.+0      	; 0x132 <init_lcd+0x2a>
 132:	00 00       	nop
	_delay_ms(4.1);     //4
	set_command(fun_8bit_2line, 0);	//5
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	a8 df       	rcall	.-176    	; 0x8a <set_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	87 ec       	ldi	r24, 0xC7	; 199
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <init_lcd+0x36>
 142:	00 c0       	rjmp	.+0      	; 0x144 <init_lcd+0x3c>
 144:	00 00       	nop
	_delay_us(100);     //6
	set_command(fun_8bit_2line, 0);	//7
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	9f df       	rcall	.-194    	; 0x8a <set_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	87 e0       	ldi	r24, 0x07	; 7
 14e:	90 e2       	ldi	r25, 0x20	; 32
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <init_lcd+0x48>
 154:	00 c0       	rjmp	.+0      	; 0x156 <init_lcd+0x4e>
 156:	00 00       	nop
	//DL:数据接口宽度标志:DL=1,8 位数据总线 DB7~DB0;DL=0,4 位数据总线 DB7~DB4,DB3~DB0
	//不用,使用此方式传送数据,需分两次进行;
	//N:显示行数标志;
	//F:显示字符点阵字体标志;
	//功能设置
	set_command(fun_4bit_2line, 0);	//9
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	96 df       	rcall	.-212    	; 0x8a <set_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	9a e6       	ldi	r25, 0x6A	; 106
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <init_lcd+0x58>
 164:	00 c0       	rjmp	.+0      	; 0x166 <init_lcd+0x5e>
	_delay_us(40);     //10
	set_command(fun_4bit_2line, 1);	//11
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	8f df       	rcall	.-226    	; 0x8a <set_command>
 16c:	8a e6       	ldi	r24, 0x6A	; 106
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <init_lcd+0x66>
 172:	00 c0       	rjmp	.+0      	; 0x174 <init_lcd+0x6c>
	_delay_us(40);     //12
	//开关显示
	set_command(0b00001000, 1);     //13.显示关闭(0) 关光标(0) 关光标闪烁(0)
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	88 df       	rcall	.-240    	; 0x8a <set_command>
 17a:	9a e6       	ldi	r25, 0x6A	; 106
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <init_lcd+0x74>
 180:	00 c0       	rjmp	.+0      	; 0x182 <init_lcd+0x7a>
	_delay_us(40);     //14
	//开关显示
	set_command(0b00001111, 1);     //15.显示开启(1) 显示光标(1) 光标闪烁(1)
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	81 df       	rcall	.-254    	; 0x8a <set_command>
 188:	8a e6       	ldi	r24, 0x6A	; 106
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <init_lcd+0x82>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <init_lcd+0x88>
	_delay_us(40);     //16
	//设置输入方式
	set_command(0b00000110, 1);     //17.写入新数据后光标右移(1) 文字不动(0)
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	7a df       	rcall	.-268    	; 0x8a <set_command>
 196:	9a e6       	ldi	r25, 0x6A	; 106
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <init_lcd+0x90>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <init_lcd+0x96>
	_delay_us(40);     //18
	//19 初始化完成
	//清屏 可选的
	set_command(0b00000001, 1);     //显示清屏(1)
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	73 df       	rcall	.-282    	; 0x8a <set_command>
 1a4:	8a e6       	ldi	r24, 0x6A	; 106
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <init_lcd+0x9e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <init_lcd+0xa4>
 1ac:	08 95       	ret

000001ae <set_data>:
/**
 * 写数据
 * @param data
 */
void set_data(uint8_t data)
{
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	wait_until_ready();     //等待指令执行完毕
 1b2:	58 df       	rcall	.-336    	; 0x64 <wait_until_ready>
	//LCDDDR = 0xff;     //数据总线位输出
	SET_DB_OUT()
 1b4:	8c 9a       	sbi	0x11, 4	; 17
 1b6:	8d 9a       	sbi	0x11, 5	; 17
 1b8:	8e 9a       	sbi	0x11, 6	; 17
 1ba:	8f 9a       	sbi	0x11, 7	; 17
	;
	RW_W;     //置为写状态
 1bc:	a9 98       	cbi	0x15, 1	; 21
	RS_H;     //写入的是数据
 1be:	aa 9a       	sbi	0x15, 2	; 21
	En_H;
 1c0:	a8 9a       	sbi	0x15, 0	; 21
	(data&0b00010000) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第4位
 1c2:	c4 ff       	sbrs	r28, 4
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <set_data+0x1c>
 1c6:	94 9a       	sbi	0x12, 4	; 18
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <set_data+0x1e>
 1ca:	94 98       	cbi	0x12, 4	; 18
	(data&0b00100000) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第5位
 1cc:	c5 ff       	sbrs	r28, 5
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <set_data+0x26>
 1d0:	95 9a       	sbi	0x12, 5	; 18
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <set_data+0x28>
 1d4:	95 98       	cbi	0x12, 5	; 18
	(data&0b01000000) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第6位
 1d6:	c6 ff       	sbrs	r28, 6
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <set_data+0x30>
 1da:	96 9a       	sbi	0x12, 6	; 18
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <set_data+0x32>
 1de:	96 98       	cbi	0x12, 6	; 18
	(data&0b10000000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第7位
 1e0:	c7 ff       	sbrs	r28, 7
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <set_data+0x3a>
 1e4:	97 9a       	sbi	0x12, 7	; 18
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <set_data+0x3c>
 1e8:	97 98       	cbi	0x12, 7	; 18
	//_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
 1ea:	31 df       	rcall	.-414    	; 0x4e <en_toggle>
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
 1ec:	c0 ff       	sbrs	r28, 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <set_data+0x46>
 1f0:	94 9a       	sbi	0x12, 4	; 18
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <set_data+0x48>
 1f4:	94 98       	cbi	0x12, 4	; 18
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
 1f6:	c1 ff       	sbrs	r28, 1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_data+0x50>
 1fa:	95 9a       	sbi	0x12, 5	; 18
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <set_data+0x52>
 1fe:	95 98       	cbi	0x12, 5	; 18
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
 200:	c2 ff       	sbrs	r28, 2
 202:	02 c0       	rjmp	.+4      	; 0x208 <set_data+0x5a>
 204:	96 9a       	sbi	0x12, 6	; 18
 206:	01 c0       	rjmp	.+2      	; 0x20a <set_data+0x5c>
 208:	96 98       	cbi	0x12, 6	; 18
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
 20a:	c3 ff       	sbrs	r28, 3
 20c:	02 c0       	rjmp	.+4      	; 0x212 <set_data+0x64>
 20e:	97 9a       	sbi	0x12, 7	; 18
 210:	01 c0       	rjmp	.+2      	; 0x214 <set_data+0x66>
 212:	97 98       	cbi	0x12, 7	; 18
	//_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
}
 214:	cf 91       	pop	r28
	(data&0b00000001) ? (DB4_DAT |= _BV(DB4)) : (DB4_DAT &= ~_BV(DB4));     //第0位
	(data&0b00000010) ? (DB5_DAT |= _BV(DB5)) : (DB5_DAT &= ~_BV(DB5));     //第1位
	(data&0b00000100) ? (DB6_DAT |= _BV(DB6)) : (DB6_DAT &= ~_BV(DB6));     //第2位
	(data&0b00001000) ? (DB7_DAT |= _BV(DB7)) : (DB7_DAT &= ~_BV(DB7));     //第3位
	//_delay_us(25);
	en_toggle();     //产生使能脉冲,使之在下降沿开始执行指令
 216:	1b cf       	rjmp	.-458    	; 0x4e <en_toggle>

00000218 <get_data>:
 * @return
 */
uint8_t get_data(void)
{
	uint8_t data = 0;
	wait_until_ready();     //等待指令执行完毕
 218:	25 df       	rcall	.-438    	; 0x64 <wait_until_ready>
	//LCDDDR = 0x00;     //数据总线位输入
	SET_DB_IN()
 21a:	8c 98       	cbi	0x11, 4	; 17
 21c:	8d 98       	cbi	0x11, 5	; 17
 21e:	8e 98       	cbi	0x11, 6	; 17
 220:	8f 98       	cbi	0x11, 7	; 17
	;
	RW_R;     //读 Hi
 222:	a9 9a       	sbi	0x15, 1	; 21
	RS_DAT;     //数据 Hi
 224:	aa 9a       	sbi	0x15, 2	; 21
	En_L;
 226:	a8 98       	cbi	0x15, 0	; 21
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <get_data+0x12>
 22e:	00 00       	nop
	DelaytE;
	En_H;     //触发
 230:	a8 9a       	sbi	0x15, 0	; 21
 232:	95 e0       	ldi	r25, 0x05	; 5
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <get_data+0x1c>
 238:	00 00       	nop
	DelaytE;
	//data = PIND;
	//先传高四位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(4)) : (data &= ~_BV(4));
 23a:	84 9b       	sbis	0x10, 4	; 16
 23c:	02 c0       	rjmp	.+4      	; 0x242 <get_data+0x2a>
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	01 c0       	rjmp	.+2      	; 0x244 <get_data+0x2c>
 242:	80 e0       	ldi	r24, 0x00	; 0
	(DB5_IN &_BV(DB5)) ? (data |= _BV(5)) : (data &= ~_BV(5));
 244:	85 99       	sbic	0x10, 5	; 16
 246:	80 62       	ori	r24, 0x20	; 32
	(DB6_IN &_BV(DB6)) ? (data |= _BV(6)) : (data &= ~_BV(6));
 248:	86 99       	sbic	0x10, 6	; 16
 24a:	80 64       	ori	r24, 0x40	; 64
	(DB7_IN &_BV(DB7)) ? (data |= _BV(7)) : (data &= ~_BV(7));
 24c:	87 9b       	sbis	0x10, 7	; 16
 24e:	02 c0       	rjmp	.+4      	; 0x254 <get_data+0x3c>
 250:	80 68       	ori	r24, 0x80	; 128
 252:	01 c0       	rjmp	.+2      	; 0x256 <get_data+0x3e>
 254:	8f 77       	andi	r24, 0x7F	; 127
	En_L;
 256:	a8 98       	cbi	0x15, 0	; 21
 258:	95 e0       	ldi	r25, 0x05	; 5
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <get_data+0x42>
 25e:	00 00       	nop
	DelaytE;
	En_H;     //触发
 260:	a8 9a       	sbi	0x15, 0	; 21
 262:	95 e0       	ldi	r25, 0x05	; 5
 264:	9a 95       	dec	r25
 266:	f1 f7       	brne	.-4      	; 0x264 <get_data+0x4c>
 268:	00 00       	nop
	DelaytE;     // 这是忙标志被映射到数据DB7 位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(0)) : (data &= ~_BV(0));
 26a:	84 9b       	sbis	0x10, 4	; 16
 26c:	02 c0       	rjmp	.+4      	; 0x272 <get_data+0x5a>
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	01 c0       	rjmp	.+2      	; 0x274 <get_data+0x5c>
 272:	8e 7f       	andi	r24, 0xFE	; 254
	(DB5_IN &_BV(DB5)) ? (data |= _BV(1)) : (data &= ~_BV(1));
 274:	85 9b       	sbis	0x10, 5	; 16
 276:	02 c0       	rjmp	.+4      	; 0x27c <get_data+0x64>
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	01 c0       	rjmp	.+2      	; 0x27e <get_data+0x66>
 27c:	8d 7f       	andi	r24, 0xFD	; 253
	(DB6_IN &_BV(DB6)) ? (data |= _BV(2)) : (data &= ~_BV(2));
 27e:	86 9b       	sbis	0x10, 6	; 16
 280:	02 c0       	rjmp	.+4      	; 0x286 <get_data+0x6e>
 282:	84 60       	ori	r24, 0x04	; 4
 284:	01 c0       	rjmp	.+2      	; 0x288 <get_data+0x70>
 286:	8b 7f       	andi	r24, 0xFB	; 251
	(DB7_IN &_BV(DB7)) ? (data |= _BV(3)) : (data &= ~_BV(3));
 288:	87 9b       	sbis	0x10, 7	; 16
 28a:	02 c0       	rjmp	.+4      	; 0x290 <get_data+0x78>
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	08 95       	ret
 290:	87 7f       	andi	r24, 0xF7	; 247
	//En_L;
	return data;
}
 292:	08 95       	ret

00000294 <get_pos>:
 * @return
 */
uint8_t get_pos(void)
{
	uint8_t data = 0;
	wait_until_ready();     //等待指令执行完毕
 294:	e7 de       	rcall	.-562    	; 0x64 <wait_until_ready>
	//LCDDDR = 0x00;     //数据总线位输入
	SET_DB_IN()
 296:	8c 98       	cbi	0x11, 4	; 17
 298:	8d 98       	cbi	0x11, 5	; 17
 29a:	8e 98       	cbi	0x11, 6	; 17
 29c:	8f 98       	cbi	0x11, 7	; 17
	;
	RW_R;     //读 HI
 29e:	a9 9a       	sbi	0x15, 1	; 21
	RS_ADDR;  //地址 0
 2a0:	aa 98       	cbi	0x15, 2	; 21
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <get_pos+0x10>
 2a8:	00 00       	nop
	DelaytE;
	En_H;     //触发
 2aa:	a8 9a       	sbi	0x15, 0	; 21
 2ac:	95 e0       	ldi	r25, 0x05	; 5
 2ae:	9a 95       	dec	r25
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <get_pos+0x1a>
 2b2:	00 00       	nop
	DelaytE;
	//先传位置低4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(0)) : (data &= ~_BV(0));
 2b4:	80 b3       	in	r24, 0x10	; 16
 2b6:	82 95       	swap	r24
 2b8:	81 70       	andi	r24, 0x01	; 1
	(DB5_IN &_BV(DB5)) ? (data |= _BV(1)) : (data &= ~_BV(1));
 2ba:	85 99       	sbic	0x10, 5	; 16
 2bc:	82 60       	ori	r24, 0x02	; 2
	(DB6_IN &_BV(DB6)) ? (data |= _BV(2)) : (data &= ~_BV(2));
 2be:	86 99       	sbic	0x10, 6	; 16
 2c0:	84 60       	ori	r24, 0x04	; 4
	(DB7_IN &_BV(DB7)) ? (data |= _BV(3)) : (data &= ~_BV(3));
 2c2:	87 99       	sbic	0x10, 7	; 16
 2c4:	88 60       	ori	r24, 0x08	; 8
	En_L;
 2c6:	a8 98       	cbi	0x15, 0	; 21
 2c8:	95 e0       	ldi	r25, 0x05	; 5
 2ca:	9a 95       	dec	r25
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <get_pos+0x36>
 2ce:	00 00       	nop
	DelaytE;
	En_H;     //触发
 2d0:	a8 9a       	sbi	0x15, 0	; 21
 2d2:	95 e0       	ldi	r25, 0x05	; 5
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <get_pos+0x40>
 2d8:	00 00       	nop
	DelaytE;
	//在传高4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(4)) : (data &= ~_BV(4));
 2da:	84 99       	sbic	0x10, 4	; 16
 2dc:	80 61       	ori	r24, 0x10	; 16
	(DB5_IN &_BV(DB5)) ? (data |= _BV(5)) : (data &= ~_BV(5));
 2de:	85 99       	sbic	0x10, 5	; 16
 2e0:	80 62       	ori	r24, 0x20	; 32
	(DB6_IN &_BV(DB6)) ? (data |= _BV(6)) : (data &= ~_BV(6));
 2e2:	86 99       	sbic	0x10, 6	; 16
 2e4:	80 64       	ori	r24, 0x40	; 64
	(DB7_IN &_BV(DB7)) ? (data |= _BV(7)) : (data &= ~_BV(7));
 2e6:	87 9b       	sbis	0x10, 7	; 16
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <get_pos+0x5a>
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	08 95       	ret
 2ee:	8f 77       	andi	r24, 0x7F	; 127
	return data;
}
 2f0:	08 95       	ret

000002f2 <get_pos2>:
 * @return
 */
uint8_t get_pos2(void)
{
	uint8_t data = 0;
	wait_until_ready();     //等待指令执行完毕
 2f2:	b8 de       	rcall	.-656    	; 0x64 <wait_until_ready>
	//LCDDDR = 0x00;     //数据总线位输入
	SET_DB_IN()
 2f4:	8c 98       	cbi	0x11, 4	; 17
 2f6:	8d 98       	cbi	0x11, 5	; 17
 2f8:	8e 98       	cbi	0x11, 6	; 17
 2fa:	8f 98       	cbi	0x11, 7	; 17
	;
	RW_R;     //读 HI
 2fc:	a9 9a       	sbi	0x15, 1	; 21
	RS_DAT;  //地址 0
 2fe:	aa 9a       	sbi	0x15, 2	; 21
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <get_pos2+0x10>
 306:	00 00       	nop
	DelaytE;
	En_H;     //触发
 308:	a8 9a       	sbi	0x15, 0	; 21
 30a:	95 e0       	ldi	r25, 0x05	; 5
 30c:	9a 95       	dec	r25
 30e:	f1 f7       	brne	.-4      	; 0x30c <get_pos2+0x1a>
 310:	00 00       	nop
	DelaytE;
	//先传位置低4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(0)) : (data &= ~_BV(0));
 312:	80 b3       	in	r24, 0x10	; 16
 314:	82 95       	swap	r24
 316:	81 70       	andi	r24, 0x01	; 1
	(DB5_IN &_BV(DB5)) ? (data |= _BV(1)) : (data &= ~_BV(1));
 318:	85 99       	sbic	0x10, 5	; 16
 31a:	82 60       	ori	r24, 0x02	; 2
	(DB6_IN &_BV(DB6)) ? (data |= _BV(2)) : (data &= ~_BV(2));
 31c:	86 99       	sbic	0x10, 6	; 16
 31e:	84 60       	ori	r24, 0x04	; 4
	(DB7_IN &_BV(DB7)) ? (data |= _BV(3)) : (data &= ~_BV(3));
 320:	87 99       	sbic	0x10, 7	; 16
 322:	88 60       	ori	r24, 0x08	; 8
	En_L;
 324:	a8 98       	cbi	0x15, 0	; 21
 326:	95 e0       	ldi	r25, 0x05	; 5
 328:	9a 95       	dec	r25
 32a:	f1 f7       	brne	.-4      	; 0x328 <get_pos2+0x36>
 32c:	00 00       	nop
	DelaytE;
	En_H;     //触发
 32e:	a8 9a       	sbi	0x15, 0	; 21
 330:	95 e0       	ldi	r25, 0x05	; 5
 332:	9a 95       	dec	r25
 334:	f1 f7       	brne	.-4      	; 0x332 <get_pos2+0x40>
 336:	00 00       	nop
	DelaytE;
	//在传高4位
	(DB4_IN &_BV(DB4)) ? (data |= _BV(4)) : (data &= ~_BV(4));
 338:	84 99       	sbic	0x10, 4	; 16
 33a:	80 61       	ori	r24, 0x10	; 16
	(DB5_IN &_BV(DB5)) ? (data |= _BV(5)) : (data &= ~_BV(5));
 33c:	85 99       	sbic	0x10, 5	; 16
 33e:	80 62       	ori	r24, 0x20	; 32
	(DB6_IN &_BV(DB6)) ? (data |= _BV(6)) : (data &= ~_BV(6));
 340:	86 99       	sbic	0x10, 6	; 16
 342:	80 64       	ori	r24, 0x40	; 64
	(DB7_IN &_BV(DB7)) ? (data |= _BV(7)) : (data &= ~_BV(7));
 344:	87 9b       	sbis	0x10, 7	; 16
 346:	02 c0       	rjmp	.+4      	; 0x34c <get_pos2+0x5a>
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	08 95       	ret
 34c:	8f 77       	andi	r24, 0x7F	; 127
	return data;
}
 34e:	08 95       	ret

00000350 <write_str>:
/**
 * 写字符串 就是把自己循环一下而已
 * @param str
 */
void write_str(char * str)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	while (*str!='\0') {
 356:	01 c0       	rjmp	.+2      	; 0x35a <write_str+0xa>
		set_data(*str++);
 358:	2a df       	rcall	.-428    	; 0x1ae <set_data>
 * 写字符串 就是把自己循环一下而已
 * @param str
 */
void write_str(char * str)
{
	while (*str!='\0') {
 35a:	89 91       	ld	r24, Y+
 35c:	81 11       	cpse	r24, r1
 35e:	fc cf       	rjmp	.-8      	; 0x358 <write_str+0x8>
		set_data(*str++);
	}
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <set_pos>:
 * 1行: 0x00 0x01 ... 0x0f
 * 2行: 0x40 0x41 ... 0x4f
 */
void set_pos(uint8_t offset)
{
	set_command(offset|0b10000000, 1);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	8f ce       	rjmp	.-738    	; 0x8a <set_command>

0000036c <return_home>:
/**
 * 光标复位到1行1列处.
 */
void return_home(void)
{
	set_command(0b00000010, 1);     //显示开启(1) 显示光标(1) 光标闪烁(1)
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	8c ce       	rjmp	.-744    	; 0x8a <set_command>

00000372 <set_cgram_addr>:
 * * 3-6位:表示第几个字符,最多定义8个自定义字符.
 * @param data
 */
void set_cgram_addr(uint8_t addr)
{
	set_command(0b01000000|(addr&0b00111111), 1);
 372:	8f 73       	andi	r24, 0x3F	; 63
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	80 64       	ori	r24, 0x40	; 64
 378:	88 ce       	rjmp	.-752    	; 0x8a <set_command>

0000037a <set_cgram_data>:
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 37a:	8f 71       	andi	r24, 0x1F	; 31
 37c:	18 cf       	rjmp	.-464    	; 0x1ae <set_data>

0000037e <init_chardb>:
 * 初始化自定义字符表 最多8个 地址从0b00,000,000 到 0b00,111,000
 * http://www.quinapalus.com/hd44780udg.html
 */
void init_chardb(void)
{
	set_cgram_addr(0b00000000);     //000,000
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	f8 df       	rcall	.-16     	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	14 df       	rcall	.-472    	; 0x1ae <set_data>
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	12 df       	rcall	.-476    	; 0x1ae <set_data>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	10 df       	rcall	.-480    	; 0x1ae <set_data>
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	0e df       	rcall	.-484    	; 0x1ae <set_data>
 392:	81 e1       	ldi	r24, 0x11	; 17
 394:	0c df       	rcall	.-488    	; 0x1ae <set_data>
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	0a df       	rcall	.-492    	; 0x1ae <set_data>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 df       	rcall	.-496    	; 0x1ae <set_data>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	06 df       	rcall	.-500    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000000);
	set_cgram_data(0b00000000);	//最下面一行光标行,最好不要使用,效果不好
	set_cgram_addr(0b00001000);   //001,000
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	e6 df       	rcall	.-52     	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	02 df       	rcall	.-508    	; 0x1ae <set_data>
 3aa:	8d e1       	ldi	r24, 0x1D	; 29
 3ac:	00 df       	rcall	.-512    	; 0x1ae <set_data>
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	fe de       	rcall	.-516    	; 0x1ae <set_data>
 3b2:	8f e1       	ldi	r24, 0x1F	; 31
 3b4:	fc de       	rcall	.-520    	; 0x1ae <set_data>
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	fa de       	rcall	.-524    	; 0x1ae <set_data>
 3ba:	87 e1       	ldi	r24, 0x17	; 23
 3bc:	f8 de       	rcall	.-528    	; 0x1ae <set_data>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	f6 de       	rcall	.-532    	; 0x1ae <set_data>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	f4 de       	rcall	.-536    	; 0x1ae <set_data>
	set_cgram_data(0b00011111);
	set_cgram_data(0b00010100);
	set_cgram_data(0b00010111);
	set_cgram_data(0b00000000);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00010000);     //010,000
 3c6:	80 e1       	ldi	r24, 0x10	; 16
 3c8:	d4 df       	rcall	.-88     	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	f0 de       	rcall	.-544    	; 0x1ae <set_data>
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	ee de       	rcall	.-548    	; 0x1ae <set_data>
 3d2:	8f e1       	ldi	r24, 0x1F	; 31
 3d4:	ec de       	rcall	.-552    	; 0x1ae <set_data>
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	ea de       	rcall	.-556    	; 0x1ae <set_data>
 3da:	8e e0       	ldi	r24, 0x0E	; 14
 3dc:	e8 de       	rcall	.-560    	; 0x1ae <set_data>
 3de:	8e e0       	ldi	r24, 0x0E	; 14
 3e0:	e6 de       	rcall	.-564    	; 0x1ae <set_data>
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	e4 de       	rcall	.-568    	; 0x1ae <set_data>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	e2 de       	rcall	.-572    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00011000);     //011,000
 3ea:	88 e1       	ldi	r24, 0x18	; 24
 3ec:	c2 df       	rcall	.-124    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	de de       	rcall	.-580    	; 0x1ae <set_data>
 3f2:	81 e1       	ldi	r24, 0x11	; 17
 3f4:	dc de       	rcall	.-584    	; 0x1ae <set_data>
 3f6:	8a e0       	ldi	r24, 0x0A	; 10
 3f8:	da de       	rcall	.-588    	; 0x1ae <set_data>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	d8 de       	rcall	.-592    	; 0x1ae <set_data>
 3fe:	8f e1       	ldi	r24, 0x1F	; 31
 400:	d6 de       	rcall	.-596    	; 0x1ae <set_data>
 402:	81 e1       	ldi	r24, 0x11	; 17
 404:	d4 de       	rcall	.-600    	; 0x1ae <set_data>
 406:	8e e0       	ldi	r24, 0x0E	; 14
 408:	d2 de       	rcall	.-604    	; 0x1ae <set_data>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	d0 de       	rcall	.-608    	; 0x1ae <set_data>
	set_cgram_data(0b00000000);
	set_cgram_data(0b00011111);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00100000);     //100,000
 40e:	80 e2       	ldi	r24, 0x20	; 32
 410:	b0 df       	rcall	.-160    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	cc de       	rcall	.-616    	; 0x1ae <set_data>
 416:	8e e0       	ldi	r24, 0x0E	; 14
 418:	ca de       	rcall	.-620    	; 0x1ae <set_data>
 41a:	85 e1       	ldi	r24, 0x15	; 21
 41c:	c8 de       	rcall	.-624    	; 0x1ae <set_data>
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	c6 de       	rcall	.-628    	; 0x1ae <set_data>
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	c4 de       	rcall	.-632    	; 0x1ae <set_data>
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	c2 de       	rcall	.-636    	; 0x1ae <set_data>
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	c0 de       	rcall	.-640    	; 0x1ae <set_data>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	be de       	rcall	.-644    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00101000);     //101,000
 432:	88 e2       	ldi	r24, 0x28	; 40
 434:	9e df       	rcall	.-196    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	ba de       	rcall	.-652    	; 0x1ae <set_data>
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	b8 de       	rcall	.-656    	; 0x1ae <set_data>
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	b6 de       	rcall	.-660    	; 0x1ae <set_data>
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	b4 de       	rcall	.-664    	; 0x1ae <set_data>
 446:	85 e1       	ldi	r24, 0x15	; 21
 448:	b2 de       	rcall	.-668    	; 0x1ae <set_data>
 44a:	8e e0       	ldi	r24, 0x0E	; 14
 44c:	b0 de       	rcall	.-672    	; 0x1ae <set_data>
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	ae de       	rcall	.-676    	; 0x1ae <set_data>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	ac de       	rcall	.-680    	; 0x1ae <set_data>
	set_cgram_data(0b00000100);
	set_cgram_data(0b00010101);
	set_cgram_data(0b00001110);
	set_cgram_data(0b00000100);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00110000);     //110,000
 456:	80 e3       	ldi	r24, 0x30	; 48
 458:	8c df       	rcall	.-232    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	a8 de       	rcall	.-688    	; 0x1ae <set_data>
 45e:	8f e1       	ldi	r24, 0x1F	; 31
 460:	a6 de       	rcall	.-692    	; 0x1ae <set_data>
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	a4 de       	rcall	.-696    	; 0x1ae <set_data>
 466:	8f e1       	ldi	r24, 0x1F	; 31
 468:	a2 de       	rcall	.-700    	; 0x1ae <set_data>
 46a:	81 e1       	ldi	r24, 0x11	; 17
 46c:	a0 de       	rcall	.-704    	; 0x1ae <set_data>
 46e:	81 e1       	ldi	r24, 0x11	; 17
 470:	9e de       	rcall	.-708    	; 0x1ae <set_data>
 472:	8f e1       	ldi	r24, 0x1F	; 31
 474:	9c de       	rcall	.-712    	; 0x1ae <set_data>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	9a de       	rcall	.-716    	; 0x1ae <set_data>
	set_cgram_data(0b00011111);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00010001);
	set_cgram_data(0b00011111);
	set_cgram_data(0b00000000);
	set_cgram_addr(0b00111000);     //111,000
 47a:	88 e3       	ldi	r24, 0x38	; 56
 47c:	7a df       	rcall	.-268    	; 0x372 <set_cgram_addr>
 * 写字模的一行,仅低5位有效
 * @param data
 */
void set_cgram_data(uint8_t data)
{
	set_data(0b00011111&data);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	96 de       	rcall	.-724    	; 0x1ae <set_data>
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	94 de       	rcall	.-728    	; 0x1ae <set_data>
 486:	85 e1       	ldi	r24, 0x15	; 21
 488:	92 de       	rcall	.-732    	; 0x1ae <set_data>
 48a:	8a e0       	ldi	r24, 0x0A	; 10
 48c:	90 de       	rcall	.-736    	; 0x1ae <set_data>
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	8e de       	rcall	.-740    	; 0x1ae <set_data>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	8c de       	rcall	.-744    	; 0x1ae <set_data>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	8a de       	rcall	.-748    	; 0x1ae <set_data>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	88 ce       	rjmp	.-752    	; 0x1ae <set_data>

0000049e <nokia5110_send1byte>:
 * @param bdata 数据还是命令
 * @param cData 发送的那个字节
 */
void nokia5110_send1byte(char bdata, char cData)
{
	if (bdata) {     //高为数据操作
 49e:	88 23       	and	r24, r24
 4a0:	11 f0       	breq	.+4      	; 0x4a6 <nokia5110_send1byte+0x8>
		PORT_DC |= _BV(PIN_DC);
 4a2:	c1 9a       	sbi	0x18, 1	; 24
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <nokia5110_send1byte+0xa>
	} else {     //command 低为命令操作
		PORT_DC &= ~_BV(PIN_DC);
 4a6:	c1 98       	cbi	0x18, 1	; 24
	}
	SPI_MasterTransmit(cData);
 4a8:	86 2f       	mov	r24, r22
 4aa:	5e c0       	rjmp	.+188    	; 0x568 <SPI_MasterTransmit>

000004ac <nokia5110_write_char>:
/**
 * 写一个字符
 * @param c
 */
void nokia5110_write_char(unsigned char c)
{
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
	unsigned char line;
	c -= 32;
 4b4:	80 52       	subi	r24, 0x20	; 32
}
/**
 * 写一个字符
 * @param c
 */
void nokia5110_write_char(unsigned char c)
 4b6:	96 e0       	ldi	r25, 0x06	; 6
 4b8:	89 9f       	mul	r24, r25
 4ba:	80 01       	movw	r16, r0
 4bc:	11 24       	eor	r1, r1
 4be:	00 5a       	subi	r16, 0xA0	; 160
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	c0 e0       	ldi	r28, 0x00	; 0
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	f8 01       	movw	r30, r16
 4c8:	ec 0f       	add	r30, r28
 4ca:	fd 1f       	adc	r31, r29
{
	unsigned char line;
	c -= 32;
	for (line = 0; line<6; line++){
		nokia5110_send1byte(NOKIA5110_DATA, font6x8[c][line]);
 4cc:	60 81       	ld	r22, Z
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	e6 df       	rcall	.-52     	; 0x49e <nokia5110_send1byte>
 4d2:	21 96       	adiw	r28, 0x01	; 1
 */
void nokia5110_write_char(unsigned char c)
{
	unsigned char line;
	c -= 32;
	for (line = 0; line<6; line++){
 4d4:	c6 30       	cpi	r28, 0x06	; 6
 4d6:	d1 05       	cpc	r29, r1
 4d8:	b1 f7       	brne	.-20     	; 0x4c6 <nokia5110_write_char+0x1a>
		nokia5110_send1byte(NOKIA5110_DATA, font6x8[c][line]);
	}
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	08 95       	ret

000004e4 <nokia5110_write_string>:
/**
 * 写字符串
 * @param string
 */
void nokia5110_write_string(char * string)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	while(*string!='\0'){
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <nokia5110_write_string+0xa>
		nokia5110_write_char(*string++);
 4ec:	df df       	rcall	.-66     	; 0x4ac <nokia5110_write_char>
 * 写字符串
 * @param string
 */
void nokia5110_write_string(char * string)
{
	while(*string!='\0'){
 4ee:	89 91       	ld	r24, Y+
 4f0:	81 11       	cpse	r24, r1
 4f2:	fc cf       	rjmp	.-8      	; 0x4ec <nokia5110_write_string+0x8>
		nokia5110_write_char(*string++);
	}
}
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <nokia5110_set_pos>:
 * 设置光标位置
 * @param x [0,83] 第几列
 * @param y [0,5] 第几行
 */
void nokia5110_set_pos(unsigned char x, unsigned char y)
{
 4fa:	cf 93       	push	r28
 4fc:	c6 2f       	mov	r28, r22
	//nokia5110_send1byte(NOKIA5110_CMD, NOKIA5110_NOMAL_MODE);
	nokia5110_send1byte(NOKIA5110_CMD, x|NOKIA5110_SET_RAMADDR_X);//X
 4fe:	68 2f       	mov	r22, r24
 500:	60 68       	ori	r22, 0x80	; 128
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	cc df       	rcall	.-104    	; 0x49e <nokia5110_send1byte>
	nokia5110_send1byte(NOKIA5110_CMD, y|NOKIA5110_SET_RAMADDR_Y);//Y
 506:	6c 2f       	mov	r22, r28
 508:	60 64       	ori	r22, 0x40	; 64
 50a:	80 e0       	ldi	r24, 0x00	; 0
}
 50c:	cf 91       	pop	r28
 */
void nokia5110_set_pos(unsigned char x, unsigned char y)
{
	//nokia5110_send1byte(NOKIA5110_CMD, NOKIA5110_NOMAL_MODE);
	nokia5110_send1byte(NOKIA5110_CMD, x|NOKIA5110_SET_RAMADDR_X);//X
	nokia5110_send1byte(NOKIA5110_CMD, y|NOKIA5110_SET_RAMADDR_Y);//Y
 50e:	c7 cf       	rjmp	.-114    	; 0x49e <nokia5110_send1byte>

00000510 <nokia5110_clear>:
}
/**
 * 清屏
 */
void nokia5110_clear(void)
{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
	int i;
	nokia5110_send1byte(NOKIA5110_CMD, 0x0c);
 514:	6c e0       	ldi	r22, 0x0C	; 12
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	c2 df       	rcall	.-124    	; 0x49e <nokia5110_send1byte>
	nokia5110_send1byte(NOKIA5110_CMD, 0x80);
 51a:	60 e8       	ldi	r22, 0x80	; 128
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	bf df       	rcall	.-130    	; 0x49e <nokia5110_send1byte>
 520:	c8 ef       	ldi	r28, 0xF8	; 248
 522:	d1 e0       	ldi	r29, 0x01	; 1
	for (i = 0; i<504; i++) {
		nokia5110_send1byte(NOKIA5110_DATA, 0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	ba df       	rcall	.-140    	; 0x49e <nokia5110_send1byte>
 52a:	21 97       	sbiw	r28, 0x01	; 1
void nokia5110_clear(void)
{
	int i;
	nokia5110_send1byte(NOKIA5110_CMD, 0x0c);
	nokia5110_send1byte(NOKIA5110_CMD, 0x80);
	for (i = 0; i<504; i++) {
 52c:	d9 f7       	brne	.-10     	; 0x524 <nokia5110_clear+0x14>
		nokia5110_send1byte(NOKIA5110_DATA, 0);
	}
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <nokia5110_init>:
/**
 * 初始化
 */
void nokia5110_init(void)
{
	DDR_DC |= _BV(PIN_DC);//设置D/C输出
 534:	b9 9a       	sbi	0x17, 1	; 23
	SPI_MasterInit();//初始化SPI
 536:	13 d0       	rcall	.+38     	; 0x55e <SPI_MasterInit>
	//使用扩展指令集
	nokia5110_send1byte(NOKIA5110_CMD, NOKIA5100_EX_instruction);
 538:	61 e2       	ldi	r22, 0x21	; 33
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	b0 df       	rcall	.-160    	; 0x49e <nokia5110_send1byte>
	nokia5110_send1byte(NOKIA5110_CMD, 0xc8);     //偏置电压
 53e:	68 ec       	ldi	r22, 0xC8	; 200
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	ad df       	rcall	.-166    	; 0x49e <nokia5110_send1byte>
	nokia5110_send1byte(NOKIA5110_CMD, 0b00000111);     //温度矫正
 544:	67 e0       	ldi	r22, 0x07	; 7
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	aa df       	rcall	.-172    	; 0x49e <nokia5110_send1byte>
	nokia5110_send1byte(NOKIA5110_CMD, 0x10);     //混合度 1:48
 54a:	60 e1       	ldi	r22, 0x10	; 16
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	a7 df       	rcall	.-178    	; 0x49e <nokia5110_send1byte>
	//使用基本指令集
	nokia5110_send1byte(NOKIA5110_CMD, NOKIA5100_BASE_instruction);
 550:	60 e2       	ldi	r22, 0x20	; 32
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	a4 df       	rcall	.-184    	; 0x49e <nokia5110_send1byte>
	//普通模式
	nokia5110_send1byte(NOKIA5110_CMD, NOKIA5110_NOMAL_MODE);
 556:	6c e0       	ldi	r22, 0x0C	; 12
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	a1 df       	rcall	.-190    	; 0x49e <nokia5110_send1byte>
	nokia5110_clear();
 55c:	d9 cf       	rjmp	.-78     	; 0x510 <nokia5110_clear>

0000055e <SPI_MasterInit>:
#include <stdio.h>
#include "spi.h"
void SPI_MasterInit(void)
{
	/* 设置 MOSI 和 SCK 为输出,其他为输入 */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
 55e:	8c e2       	ldi	r24, 0x2C	; 44
 560:	87 bb       	out	0x17, r24	; 23
	/* 使能 SPI 主机模式,设置时钟速率为 fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
 562:	83 e5       	ldi	r24, 0x53	; 83
 564:	8d b9       	out	0x0d, r24	; 13
 566:	08 95       	ret

00000568 <SPI_MasterTransmit>:
 568:	8f b9       	out	0x0f, r24	; 15
 56a:	77 9b       	sbis	0x0e, 7	; 14
 56c:	fe cf       	rjmp	.-4      	; 0x56a <SPI_MasterTransmit+0x2>
 56e:	08 95       	ret

00000570 <main>:
{
	//SPI_MasterInit();
	//uint8_t ch;
	//0. 初始化LCD
	//init_lcd();
	nokia5110_init();
 570:	e1 df       	rcall	.-62     	; 0x534 <nokia5110_init>
	//_delay_ms(10);
	//nokia5110_set_pos(0,0);
	//_delay_ms(10);
	nokia5110_write_string("hello worldsdfs fsd f sd f sd f s");
 572:	88 e8       	ldi	r24, 0x88	; 136
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	b6 df       	rcall	.-148    	; 0x4e4 <nokia5110_write_string>
	while(1)
		nokia5110_set_pos(0,0);
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	be df       	rcall	.-132    	; 0x4fa <nokia5110_set_pos>
 57e:	fc cf       	rjmp	.-8      	; 0x578 <main+0x8>

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
